version: '3.9'

services:
  postgres:
    build:
      context: ./postgres
      dockerfile: dockerfile
    container_name: postgres
    env_file:
      - .env
    environment:
      - POSTGRES_PASSWORD=${PG_PASSWORD}
      - POSTGRES_USER=${PG_USER}
      - POSTGRES_DB=${PG_NAME}


  elasticsearch:
    image: elasticsearch:8.6.2
    container_name: elasticsearch
    ports:
      - "9200:9200"
    environment:
      - "discovery.type=single-node"
      - "xpack.security.enabled=false"
    env_file:
      - .env
    volumes:
      - es_data:/usr/share/elasticsearch/data


  data_transfer_sqlite_to_pg:
    build:
      context: data_transfer_sqlite_to_pg
      dockerfile: Dockerfile
    container_name: data_transfer
    ports:
      - "8888:8888"
    env_file:
      - .env

  app:
    build:
      context: admin_django
      dockerfile: Dockerfile
    container_name: django_web
    expose:
      - 8000
    env_file:
      - .env
    volumes:
      - static_volume:/app/staticfiles
      - media_volume:/app/media
      - ./data:/data/:ro
    depends_on:
      - postgres


  nginx:
    image: nginx:1.19.2
    container_name: nginx
    volumes:
      - ./admin_nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./admin_nginx/site.conf:/etc/nginx/conf.d/site.conf:ro
      - ./admin_nginx/api.conf:/etc/nginx/conf.d/api.conf:ro
      - static_volume:/app/staticfiles
      - media_volume:/app/media
      - ./data:/data/:ro
    depends_on:
      - app
    ports:
      - "80:80"
      - "8000:80"
      - "8080:8080"

  cache:
    image: redis:7.2.3-alpine3.18
    container_name: cache
    restart: always
    env_file:
      - .env
    volumes:
      - cache:/data

  etl:
    container_name: etl
    build:
      context: ETL
      dockerfile: dockerfile
    command: python3 main.py
    depends_on:
      - postgres
      - elasticsearch
      - cache
    env_file:
      - .env
    environment:
      PYTHONPATH: /src
      DB_NAME: ${PG_NAME}
      DB_USER: ${PG_USER}
      DB_PASSWORD: ${PG_PASSWORD}
      DB_HOST: ${PG_HOST}
      DB_PORT: ${PG_PORT}
      REDIS_HOST: ${REDIS_HOST}
      REDIS_PORT: ${REDIS_PORT}
      REDIS_DB: ${REDIS_DB}
      ES_HOST: ${ES_HOST}
      ES_PORT: ${ES_PORT}


  async_api:
    container_name: fastapi
    image: fastapi-image
    command: gunicorn main:app --worker-class uvicorn.workers.UvicornWorker --bind 0.0.0.0:7000
    env_file:
      - .env
    environment:
      PYTHONPATH: /app/src
      ES_HOST: ${ES_HOST}
      ES_PORT: ${ES_PORT}
      REDIS_HOST: ${REDIS_HOST}
      REDIS_PORT: ${REDIS_PORT}
    build:
      context: async_api
      dockerfile: Dockerfile
    ports:
      - 9999:7000
    volumes:
      - ./async_api/src:/app
    depends_on:
      - etl
      - cache


volumes:
  pg_data:
  es_data:
  static_volume:
  media_volume:
  cache:

